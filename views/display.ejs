<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Playlist Size Tracker for Spotify</title>
</head>
<body>
    <h1><%= list_name %></h1><br>

    <div id="chart_display" style="width: 75%; height: 75%;">
        <canvas id="chart"></canvas>
    </div>
    <div id="chart_options">
        <label>
            <input type="checkbox" id="change_end_date"> X-Axis ends at Last Added Track
        </label>
    </div>

    <h2>Tracks:</h2>
    <% for (var i = 0; i < display_data.length; i++) { %>
    <%- (i+1).toString().padStart(4, "⠀").padEnd(6, "⠀") %> | <%- display_data[i].name %> - <%- display_data[i].artists %> : <%= display_data[i].date %><br>
    <% } %>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon/build/global/luxon.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon"></script>

    <script>
        // define functions first
        const setMaxDate = (boxChecked, minDate, maxDate) => {
        if (boxChecked)
            return new Date(maxDate + 0.05 * (maxDate - minDate));
        else return Date.now();
        }

        // get document elements
        const canvas = document.getElementById('chart');
        const box = document.getElementById('change_end_date');

        const json_data = <%- JSON.stringify(chart_data) %>
        const tooltip_data = <%- JSON.stringify(tooltip_data) %>
        const track_links = <%- JSON.stringify(track_links) %>

        // format the date axis correctly
        const dates = json_data.map(d => new Date(d.x));
        let minDate = new Date(Math.min.apply(null, dates));
        let maxDate = new Date(Math.max.apply(null, dates));

        let axisEnd = Date.now(); // end the axis at Now by default (the checkbox changes this)
        let range = axisEnd - minDate;

        let axisStart = new Date(minDate - (0.05 * range));

        // setup chart data and config objects
        const data = {
                    datasets: [
                        {
                            label: 'Playlist Size',
                            data: json_data,
                            borderColor: 'rgba(255, 61, 61)',
                            borderWidth: 2,
                            backgroundColor: 'rgba(0, 0, 0, 0)',
                        }
                    ]
                };

        const config = {
            type: 'line',
            data: data,
            options: {
                interaction: {
                    mode: 'nearest'
                },
                onClick: (event, elements) => {
                    if (elements.length > 0) {
                        const index = elements[0].index; // get selected track no.
                        if (index < <%= num_tracks %>)
                            window.open(track_links[index], '_blank'); // redirect to the song's page on spotify
                    }
                },
                plugins: {
                  tooltip: {
                    callbacks: {
                        beforeLabel: (context) => {
                            if (context.parsed) {
                                let data;
                                // if the x-axis ends at Now, display correct tooltip for the 'as of now' item
                                if (context.parsed.y > <%= num_tracks %>) // this is done by detecting an item with a slightly higher y-value
                                    data = tooltip_data[<%= num_tracks %>];
                                else data = tooltip_data[context.parsed.y - 1];
                                return `${data.name} - ${data.artists}`;
                            }
                        },
                        label: (context) => {
                            if (context.parsed) {
                                if (context.parsed.y <= <%= num_tracks %>)
                                    return '#' + context.parsed.y;
                                else return '';
                            }
                        },
                        afterLabel: (context) => {
                            if (context.parsed) {
                                if (context.parsed.y <= <%= num_tracks %>)
                                    return 'Click to Listen on Spotify';
                            }
                        }
                    }
                  }
                },
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            tooltipFormat: 'DD T',
                            minUnit: 'day',
                            displayFormats: {
                                day: 'dd/MM/yy'
                            }
                        },
                        title: {
                            display: true,
                            text: 'Date',
                            font: {
                                size: 20,
                                weight: 'bold',
                                lineHeight: 1.2
                            },
                            padding: {top: 10, left: 0, right: 0, bottom: 0}

                        },
                        min: axisStart,
                        max: axisEnd
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'No. of Tracks',
                            font: {
                                size: 20,
                                weight: 'bold',
                                lineHeight: 1.2
                            },
                            padding: {top: 0, left: 0, right: 20, bottom: 0}
                        },
                        min: 0,
                        max: <%= Math.ceil(num_tracks / 10) * 10 %>,
                        ticks: {
                            stepSize: <%= Math.ceil(num_tracks / 10) %>
                        }
                    }
                }
            }
        };
        let chart = new Chart(canvas, config); // display chart

        box.addEventListener('change', function() { // listen for checkbox changes
            axisEnd = setMaxDate(this.checked, minDate, maxDate); // change date axes
            let range = axisEnd - minDate;
            axisStart = new Date(minDate - (0.05 * range));

            if (this.checked) {
                if (tooltip_data[tooltip_data.length - 1].name === "Size as of Now") {
                    tooltip_data.pop();
                    json_data.pop();
                }
            }
            else {
                if (tooltip_data[tooltip_data.length - 1].name !== "Size as of Now") {
                    tooltip_data.push({
                        "name": "Size as of Now",
                        "artists": <%= num_tracks %>
                    });
                    json_data.push({
                        "x": Date.now(),
                        "y": <%= num_tracks + 0.001 %>
                    })
                }
            }

            // finally, set data values in the chart object
            chart.data.datasets[0].data = json_data;
            chart.config.options.scales.x.min = axisStart;
            chart.config.options.scales.x.max = axisEnd;

            chart.update();
        });
    </script>
</body>
</html>